{"version":3,"file":"static/js/134.adc03c65.chunk.js","mappings":"sMAmEA,UA/De,WAAO,IAAD,EACbA,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,oBAApB,QAAoC,IAEnDC,EAAAA,EAAAA,YAAU,WACR,GAAkB,KAAdF,EAAJ,EAGEG,EAAAA,EAAAA,IAAWH,GACRI,MAAK,SAAAC,GACJT,EAASS,EAASC,KAAKC,QACxB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GATuB,CAa7B,GAAE,CAACT,IAQJ,OACE,6BACE,kBAAMY,SARW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfjB,EAAgB,CAAEC,UAAWe,EAAKE,SAASjB,UAAUkB,OACtD,EAIG,WACE,kBACEC,KAAK,OACLC,KAAK,YACLC,YAAY,kBACZC,aAAa,MACbC,WAAS,KAEX,mBAAQJ,KAAK,SAAb,SAAsB,cAGb,OAAVxB,GAAgC,KAAdK,IACjB,0BACG,IACAL,EAAM6B,KAAI,SAAAC,GAAK,OACd,SAAC,KAAD,CACEC,GAAE,UAAKD,EAAME,IAEbC,MAAO,CAAEC,KAAMrC,GAHjB,UAKE,wBAAKiC,EAAMK,SAHNL,EAAME,GAHC,QAYpB,SAAC,EAAAI,SAAD,CAAUC,UAAU,yBAAK,uBAAzB,UACE,SAAC,KAAD,QAIP,C,+LC/DKC,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGAEtBC,EAFsB,UAELH,EAFK,uCAEkCC,EAFlC,mCAILG,EAAAA,EAAAA,IAAUD,GAJL,cAItB/B,EAJsB,gBAMfA,EAASC,KANM,gFAQtB,IAAIgC,MAAM,KAAIC,SARQ,0DAAH,qDAYhBC,EAAU,mCAAG,WAAMC,GAAN,yFAEhBC,EAFgB,UAEAT,EAFA,kBAEkBQ,EAFlB,oBAEqCP,EAFrC,mCAICG,EAAAA,EAAAA,IAAUK,GAJX,cAIhBrC,EAJgB,gBAMTA,EAASC,KANA,gFAQhB,IAAIgC,MAAM,KAAIC,SARE,0DAAH,sDAYVI,EAAO,mCAAG,WAAMF,GAAN,yFAEbG,EAFa,UAEAX,EAFA,kBAEkBQ,EAFlB,4BAE6CP,EAF7C,mCAIIG,EAAAA,EAAAA,IAAUO,GAJd,cAIbvC,EAJa,gBAMNA,EAASC,KANH,gFAQb,IAAIgC,MAAM,KAAIC,SARD,0DAAH,sDAYPM,EAAS,mCAAG,WAAMJ,GAAN,yFAEfK,EAFe,UAECb,EAFD,kBAEmBQ,EAFnB,4BAE8CP,EAF9C,mCAIEG,EAAAA,EAAAA,IAAUS,GAJZ,cAIfzC,EAJe,gBAMRA,EAASC,KAND,gFAQf,IAAIgC,MAAM,KAAIC,SARC,0DAAH,sDAYTpC,EAAU,mCAAG,WAAMR,GAAN,yFAEhBQ,EAFgB,UAEA8B,EAFA,iCAEiCC,EAFjC,iCAEiEvC,EAFjE,YAIhBU,EAAWgC,EAAAA,EAAAA,IAAUlC,GAJL,kBAMfE,GANe,sCAQhB,IAAIiC,MAAM,KAAIC,SARE,wDAAH,qD","sources":["pages/Movies.jsx","services/api.js"],"sourcesContent":["import { useSearchParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { Suspense, useEffect, useState } from 'react';\nimport { getByQuery } from 'services/api';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [query, setQuery] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('movieName') ?? '';\n\n  useEffect(() => {\n    if (movieName === '') return;\n\n    const fetchMovies = () => {\n      getByQuery(movieName)\n        .then(response => {\n          setQuery(response.data.results);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    };\n\n    fetchMovies();\n  }, [movieName]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ movieName: form.elements.movieName.value });\n  };\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"movieName\"\n          placeholder=\"Search movie...\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {query !== null && movieName !== '' && (\n        <ul>\n          {' '}\n          {query.map(movie => (\n            <Link\n              to={`${movie.id}`}\n              key={movie.id}\n              state={{ from: location }}\n            >\n              <li>{movie.title}</li>\n            </Link>\n          ))}\n        </ul>\n      )}\n\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '5591255f50bf473d44ec0f5688b59618';\n\nexport const getTrendingMovie = async () => {\n  try {\n    const trendingUrl = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&language=en-US&page=1`;\n\n    const response = await axios.get(trendingUrl);\n\n    return await response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const getDetails = async movieId => {\n  try {\n    const detailsUrl = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US&page=1`;\n\n    const response = await axios.get(detailsUrl);\n\n    return await response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const getCast = async movieId => {\n  try {\n    const castUrl = `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US&page=1`;\n\n    const response = await axios.get(castUrl);\n\n    return await response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const getReview = async movieId => {\n  try {\n    const reviewsUrl = `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n\n    const response = await axios.get(reviewsUrl);\n\n    return await response.data;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n\nexport const getByQuery = async query => {\n  try {\n    const getByQuery = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1}`;\n\n    const response = axios.get(getByQuery);\n\n    return response;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n};\n"],"names":["location","useLocation","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","getByQuery","then","response","data","results","catch","error","console","log","onSubmit","e","preventDefault","form","currentTarget","elements","value","type","name","placeholder","autoComplete","autoFocus","map","movie","to","id","state","from","title","Suspense","fallback","BASE_URL","API_KEY","getTrendingMovie","trendingUrl","axios","Error","message","getDetails","movieId","detailsUrl","getCast","castUrl","getReview","reviewsUrl"],"sourceRoot":""}